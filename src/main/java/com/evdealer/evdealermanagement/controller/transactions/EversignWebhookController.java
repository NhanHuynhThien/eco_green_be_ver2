package com.evdealer.evdealermanagement.controller.transactions;

import com.evdealer.evdealermanagement.entity.transactions.PurchaseRequest;
import com.evdealer.evdealermanagement.repository.PurchaseRequestRepository;
import com.evdealer.evdealermanagement.service.implement.EversignService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Map;

@RestController
@RequestMapping("/api/webhooks/eversign")
@RequiredArgsConstructor
@Slf4j
public class EversignWebhookController {

    private final PurchaseRequestRepository purchaseRequestRepository;
    private final EversignService eversignService;

    /**
     * Webhook cho document completed (all signers signed)
     */
    @PostMapping("/document-complete")
    public ResponseEntity<?> handleDocumentComplete(@RequestBody(required = false) Map<String, Object> payload) {
        // Th√™m (required = false) ƒë·ªÉ tr√°nh l·ªói khi truy c·∫≠p th·ªß c√¥ng
        try {
            // Ki·ªÉm tra payload v√† document_hash ƒë·ªÉ x·ª≠ l√Ω l·ªói 500
            if (payload == null || !payload.containsKey("document_hash")) {
                log.error("‚ùå Webhook nh·∫≠n ƒë∆∞·ª£c body r·ªóng ho·∫∑c thi·∫øu 'document_hash'");
                return ResponseEntity.badRequest().body(Map.of("success", false, "error", "Invalid payload"));
            }

            log.info("üéâ Webhook Document Completed ƒë∆∞·ª£c nh·∫≠n: {}", payload);
            String documentHash = (String) payload.get("document_hash");

            // Giao to√†n b·ªô vi·ªác x·ª≠ l√Ω cho Service trong m·ªôt transaction duy nh·∫•t
            eversignService.processDocumentCompletion(documentHash);

            return ResponseEntity.ok(Map.of("success", true));

        } catch (Exception e) {
            log.error("‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω webhook: {}", e.getMessage(), e);
            // Tr·∫£ v·ªÅ l·ªói 500 n·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra trong service
            return ResponseEntity.internalServerError().body(Map.of("success", false, "error", e.getMessage()));
        }
    }
}