package com.evdealer.evdealermanagement.service.implement;

import com.evdealer.evdealermanagement.dto.price.PriceSuggestion;
import com.evdealer.evdealermanagement.utils.PriceSerializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.cdimascio.dotenv.Dotenv;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Service ƒë·ªÉ t√≠ch h·ª£p Google Gemini API cho vi·ªác g·ª£i √Ω gi√° s·∫£n ph·∫©m
 * S·ª≠ d·ª•ng REST API tr·ª±c ti·∫øp th√¥ng qua RestTemplate
 */
@Service
@Slf4j
public class GeminiRestService {

    private final Dotenv dotenv;

    private String apiKey;
    private String modelName;
    private int maxTokens;
    private float temperature;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    public GeminiRestService(Dotenv dotenv) {
        this.dotenv = dotenv;
    }

    @PostConstruct
    public void init() {
        this.apiKey = dotenv.get("GEMINI_API_KEY");
        this.modelName = dotenv.get("GEMINI_MODEL", "gemini-1.5-flash");
        this.maxTokens = Integer.parseInt(dotenv.get("GEMINI_MAX_TOKENS", "500"));
        this.temperature = Float.parseFloat(dotenv.get("GEMINI_TEMPERATURE", "0.2"));

        log.info("=== GEMINI REST SERVICE INITIALIZED ===");
        log.info("Model: {}", modelName);
        log.info("MaxTokens: {}", maxTokens);
        log.info("Temperature: {}", temperature);

        if (apiKey == null || apiKey.isEmpty()) {
            log.error("‚ùå GEMINI_API_KEY not found in .env file!");
            throw new IllegalStateException("GEMINI_API_KEY is required");
        }
    }

    /**
     * G·ª£i √Ω gi√° cho s·∫£n ph·∫©m d·ª±a tr√™n ti√™u ƒë·ªÅ
     * @param title Ti√™u ƒë·ªÅ s·∫£n ph·∫©m
     * @return PriceSuggestion ch·ª©a gi√° v√† m√¥ t·∫£
     */
    public PriceSuggestion suggestPrice(String title) {
        String prompt = buildPrompt(title);

        try {
            log.info("=== GEMINI REST API REQUEST ===");
            log.info("Title: {}", title);

            String url = String.format(
                    "https://generativelanguage.googleapis.com/v1/models/%s:generateContent?key=%s",
                    modelName, apiKey
            );

            Map<String, Object> requestBody = Map.of(
                    "contents", List.of(
                            Map.of("parts", List.of(Map.of("text", prompt)))
                    ),
                    "generationConfig", Map.of(
                            "temperature", temperature,
                            "maxOutputTokens", maxTokens,
                            "topP", 0.9,
                            "topK", 40
                    )
            );

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.POST,
                    request,
                    String.class
            );

            log.info("Response status: {}", response.getStatusCode());

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                return handleSuccessResponse(response.getBody(), title);
            } else {
                log.error("‚ùå Unexpected response status: {}", response.getStatusCode());
                return generateFallback(title);
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling Gemini REST API: {}", e.getMessage(), e);
            return generateFallback(title);
        }
    }

    /**
     * X√¢y d·ª±ng prompt cho Gemini
     */
    private String buildPrompt(String title) {
        return String.format(
                "B·∫°n l√† chuy√™n gia th·∫©m ƒë·ªãnh gi√° c√°c s·∫£n ph·∫©m C≈® t·∫°i Vi·ªát Nam (xe ƒëi·ªán, pin, linh ki·ªán ƒëi·ªán, thi·∫øt b·ªã ƒëi·ªán t·ª≠, v.v.).\n" +
                        "Nhi·ªám v·ª•: ƒê∆∞a ra **gi√° g·ª£i √Ω h·ª£p l√Ω** v√† **m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ t√¨nh tr·∫°ng s·∫£n ph·∫©m** d·ª±a tr√™n th√¥ng tin ng∆∞·ªùi b√°n cung c·∫•p.\n\n" +
                        "S·∫£n ph·∫©m: %s\n\n" +
                        "Y√™u c·∫ßu ph·∫£n h·ªìi:\n" +
                        "1Ô∏è‚É£ Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng sau (kh√¥ng markdown, kh√¥ng k√Ω t·ª± ƒë·∫∑c bi·ªát):\n" +
                        "Gi√° g·ª£i √Ω: [kho·∫£ng gi√° ho·∫∑c s·ªë c·ª• th·ªÉ] VNƒê\n" +
                        "M√¥ t·∫£ ng·∫Øn g·ªçn: [1 c√¢u ƒë√°nh gi√° t·ªïng quan t√¨nh tr·∫°ng, ƒë·ªô m·ªõi, hi·ªáu su·∫•t ho·∫∑c gi√° tr·ªã s·ª≠ d·ª•ng]\n\n" +
                        "V√≠ d·ª•:\n" +
                        "Gi√° g·ª£i √Ω: Kho·∫£ng 58‚Äì62 tri·ªáu VNƒê\n" +
                        "M√¥ t·∫£ ng·∫Øn g·ªçn: Pin xe ƒëi·ªán c√≤n 90%%, gi·ªØ hi·ªáu su·∫•t t·ªët, th√≠ch h·ª£p ƒë·ªÉ t√°i s·ª≠ d·ª•ng.\n\n" +
                        "Ho·∫∑c:\n" +
                        "Gi√° g·ª£i √Ω: 12.500.000 VNƒê\n" +
                        "M√¥ t·∫£ ng·∫Øn g·ªçn: B·ªô s·∫°c xe ƒëi·ªán ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, b·ªÅ ngo√†i h∆°i tr·∫ßy nh∆∞ng hi·ªáu nƒÉng t·ªët.\n\n" +
                        "Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng format tr√™n, kh√¥ng th√™m l·ªùi gi·∫£i th√≠ch.",
                title
        );
    }

    /**
     * X·ª≠ l√Ω response th√†nh c√¥ng t·ª´ Gemini API
     */
    private PriceSuggestion handleSuccessResponse(String responseBody, String title) {
        try {
            JsonNode root = objectMapper.readTree(responseBody);

            // Ki·ªÉm tra l·ªói trong response
            if (root.has("error")) {
                JsonNode error = root.get("error");
                log.error("API Error: {} - {}",
                        error.path("code").asInt(),
                        error.path("message").asText()
                );
                return generateFallback(title);
            }

            // L·∫•y candidates t·ª´ response
            JsonNode candidates = root.path("candidates");

            if (candidates.isArray() && candidates.size() > 0) {
                JsonNode firstCandidate = candidates.get(0);

                // üîç Ki·ªÉm tra finishReason ƒë·ªÉ bi·∫øt t·∫°i sao b·ªã block
                JsonNode finishReason = firstCandidate.path("finishReason");
                if (!finishReason.isMissingNode()) {
                    String reason = finishReason.asText();
                    log.info("Finish Reason: {}", reason);

                    // N·∫øu b·ªã block b·ªüi safety
                    if (!"STOP".equals(reason)) {
                        log.warn("‚ö†Ô∏è Response blocked/filtered. Reason: {}", reason);

                        // Ki·ªÉm tra safety ratings n·∫øu c√≥
                        JsonNode safetyRatings = firstCandidate.path("safetyRatings");
                        if (safetyRatings.isArray()) {
                            log.info("Safety ratings: {}", safetyRatings);
                        }

                        return generateFallback(title);
                    }
                }

                // L·∫•y content
                JsonNode content = firstCandidate.path("content");

                if (!content.isMissingNode()) {
                    JsonNode parts = content.path("parts");

                    // ‚úÖ FIX: Ki·ªÉm tra parts c√≥ ph·∫ßn t·ª≠ kh√¥ng
                    if (parts.isArray() && parts.size() > 0) {
                        JsonNode textNode = parts.get(0).path("text");

                        if (!textNode.isMissingNode() && !textNode.asText().isEmpty()) {
                            String text = textNode.asText();
                            log.info("‚úÖ Gemini response text received");
                            return parseResponse(text, title);
                        }
                    } else {
                        log.error("‚ùå Parts is empty or not an array");
                    }
                } else {
                    log.error("‚ùå Content node is missing");
                }
            } else {
                log.error("‚ùå Candidates array is empty or missing");
            }

            log.error("‚ùå Unexpected response format: no text content found");
            return generateFallback(title);

        } catch (Exception e) {
            log.error("‚ùå Error parsing Gemini response: {}", e.getMessage(), e);
            return generateFallback(title);
        }
    }

    /**
     * Parse response text t·ª´ Gemini th√†nh PriceSuggestion
     */
    private PriceSuggestion parseResponse(String rawText, String title) {
        // Pattern ƒë·ªÉ match "Gi√° g·ª£i √Ω: ... VNƒê"
        Pattern pricePattern = Pattern.compile(
                "Gi√° g·ª£i √Ω:\\s*(.+?VNƒê)",
                Pattern.CASE_INSENSITIVE | Pattern.DOTALL
        );

        // Pattern ƒë·ªÉ match "M√¥ t·∫£ ng·∫Øn g·ªçn: ..."
        Pattern reasonPattern = Pattern.compile(
                "M√¥ t·∫£ ng·∫Øn g·ªçn:\\s*(.+?)(?=\\n|$)",
                Pattern.CASE_INSENSITIVE | Pattern.DOTALL
        );

        Matcher priceMatcher = pricePattern.matcher(rawText);
        Matcher reasonMatcher = reasonPattern.matcher(rawText);

        String priceStr = priceMatcher.find()
                ? priceMatcher.group(1).trim()
                : "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c gi√°";

        String reason = reasonMatcher.find()
                ? reasonMatcher.group(1).trim()
                : "Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt.";

        // Clean up markdown v√† k√Ω t·ª± kh√¥ng mong mu·ªën
        priceStr = cleanText(priceStr);
        reason = cleanText(reason);

        log.info("‚úÖ Parsed ‚Üí Price: {}, Reason: {}", priceStr, reason);
        return new PriceSuggestion(priceStr, reason);
    }

    /**
     * L√†m s·∫°ch text: b·ªè markdown, k√Ω t·ª± ƒë·∫∑c bi·ªát
     */
    private String cleanText(String text) {
        return text
                .replaceAll("\\*+", "")           // B·ªè d·∫•u *
                .replaceAll("\\n+", " ")          // Thay newline b·∫±ng space
                .replaceAll("\\s{2,}", " ")       // B·ªè multiple spaces
                .trim();
    }

    /**
     * Generate fallback price khi API fail ho·∫∑c kh√¥ng c√≥ response
     */
    private PriceSuggestion generateFallback(String title) {
        log.warn("‚ö†Ô∏è Using fallback pricing for: {}", title);

        String lowerTitle = title.toLowerCase();

        // Gi√° base theo lo·∫°i s·∫£n ph·∫©m
        BigDecimal basePrice = determineBasePrice(lowerTitle);

        // Factor ƒëi·ªÅu ch·ªânh theo t√¨nh tr·∫°ng
        BigDecimal factor = determinePriceFactor(lowerTitle);

        // T√≠nh gi√° ∆∞·ªõc t√≠nh
        BigDecimal estimated = basePrice
                .multiply(factor)
                .setScale(0, RoundingMode.HALF_UP);

        String formatted = PriceSerializer.formatPrice(estimated);

        String reason = String.format(
                "Gi√° ∆∞·ªõc t√≠nh tham kh·∫£o cho '%s' (t√¨nh tr·∫°ng kho·∫£ng %.0f%% gi√° g·ªëc).",
                title,
                factor.multiply(BigDecimal.valueOf(100)).doubleValue()
        );

        return new PriceSuggestion("Kho·∫£ng " + formatted + " VNƒê", reason);
    }

    /**
     * X√°c ƒë·ªãnh gi√° base theo lo·∫°i s·∫£n ph·∫©m
     */
    private BigDecimal determineBasePrice(String lowerTitle) {
        if (lowerTitle.contains("xe")) {
            return BigDecimal.valueOf(300_000_000L);
        } else if (lowerTitle.contains("pin") || lowerTitle.contains("battery")) {
            return BigDecimal.valueOf(50_000_000L);
        } else if (lowerTitle.contains("ƒë·ªông c∆°") || lowerTitle.contains("motor")) {
            return BigDecimal.valueOf(20_000_000L);
        } else if (lowerTitle.contains("b·ªô s·∫°c") || lowerTitle.contains("charger")) {
            return BigDecimal.valueOf(10_000_000L);
        } else if (lowerTitle.contains("b√¨nh")) {
            return BigDecimal.valueOf(15_000_000L);
        } else if (lowerTitle.contains("linh ki·ªán") || lowerTitle.contains("ph·ª• t√πng")) {
            return BigDecimal.valueOf(8_000_000L);
        }

        return BigDecimal.valueOf(5_000_000L); // M·∫∑c ƒë·ªãnh
    }

    /**
     * X√°c ƒë·ªãnh factor gi√° theo t√¨nh tr·∫°ng
     */
    private BigDecimal determinePriceFactor(String lowerTitle) {
        if (lowerTitle.contains("m·ªõi") || lowerTitle.contains("100%")) {
            return BigDecimal.valueOf(0.95);
        } else if (lowerTitle.contains("90%") || lowerTitle.contains("nh∆∞ m·ªõi")) {
            return BigDecimal.valueOf(0.85);
        } else if (lowerTitle.contains("80%")) {
            return BigDecimal.valueOf(0.75);
        } else if (lowerTitle.contains("70%")) {
            return BigDecimal.valueOf(0.65);
        } else if (lowerTitle.contains("60%") || lowerTitle.contains("trung b√¨nh")) {
            return BigDecimal.valueOf(0.55);
        } else if (lowerTitle.contains("c≈©") || lowerTitle.contains("ƒë√£ qua s·ª≠ d·ª•ng")) {
            return BigDecimal.valueOf(0.70);
        }

        return BigDecimal.ONE; // M·∫∑c ƒë·ªãnh 100%
    }
}