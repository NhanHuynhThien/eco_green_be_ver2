package com.evdealer.evdealermanagement.service.implement;

import com.evdealer.evdealermanagement.dto.price.PriceSuggestion;
import com.evdealer.evdealermanagement.dto.vehicle.catalog.VehicleCatalogDTO;
import com.evdealer.evdealermanagement.entity.vehicle.Model;
import com.evdealer.evdealermanagement.repository.VehicleModelRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.cdimascio.dotenv.Dotenv;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class GeminiRestService {

    private final Dotenv dotenv;

    private String apiKey;
    private String modelName;
    private int maxTokens;
    private float temperature;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    private final VehicleModelRepository vehicleModelRepository;

    @PostConstruct
    public void init() {
        this.apiKey = dotenv.get("GEMINI_API_KEY");
        this.modelName = dotenv.get("GEMINI_MODEL", "gemini-1.5-flash-latest");
        this.maxTokens = Integer.parseInt(dotenv.get("GEMINI_MAX_TOKENS", "8096"));
        this.temperature = Float.parseFloat(dotenv.get("GEMINI_TEMPERATURE", "0.7"));

        log.info("=== GEMINI REST SERVICE INITIALIZED ===");
        log.info("Model: {}", modelName);
        log.info("MaxTokens: {}", maxTokens);
        log.info("Temperature: {}", temperature);

        if (apiKey == null || apiKey.isEmpty()) {
            log.error("‚ùå GEMINI_API_KEY not found in .env file!");
            throw new IllegalStateException("GEMINI_API_KEY is required");
        }
    }

    // ========== Suggest Price, Title & Description ==========

    public PriceSuggestion suggestPrice(
            String vehicleModel,
            String versionName,
            String batteryHealth,
            String mileageKm,
            String brandName,
            String manufactureYear) {

        if (vehicleModel == null || vehicleModel.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è vehicleModel is empty - using fallback");
            return generateFallback("Unknown Vehicle");
        }

        String prompt = buildPricePrompt(vehicleModel, versionName, batteryHealth,
                mileageKm, brandName, manufactureYear);

        try {
            log.info("=== GEMINI API REQUEST: Price Suggestion ===");
            log.info("Vehicle: {} {} {} ({})", brandName, vehicleModel, versionName, manufactureYear);

            String url = String.format(
                    "https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s",
                    this.modelName, apiKey);

            Map<String, Object> requestBody = Map.of(
                    "contents", List.of(
                            Map.of("parts", List.of(Map.of("text", prompt)))
                    ),
                    "generationConfig", Map.of(
                            "temperature", temperature,
                            "maxOutputTokens", maxTokens,
                            "topP", 0.95,
                            "topK", 40
                    )
            );

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    url, HttpMethod.POST, request, String.class);

            log.info("‚úÖ Response status: {}", response.getStatusCode());

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                return handleSuccessResponse(response.getBody(), vehicleModel);
            } else {
                log.error("‚ùå Unexpected response status: {}", response.getStatusCode());
                return generateFallback(vehicleModel);
            }

        } catch (Exception e) {
            log.error("‚ùå Error calling Gemini API: {}", e.getMessage(), e);
            return generateFallback(vehicleModel);
        }
    }

    /**
     * Build optimized prompt for price suggestion with JSON output
     */
    private String buildPricePrompt(String vehicleModel, String versionName,
                                    String batteryHealth, String mileageKm,
                                    String brandName, String manufactureYear) {
        if (versionName == null) {
            versionName = "Phi√™n b·∫£n ti√™u chu·∫©n, m·∫∑c ƒë·ªãnh c·ªßa nh√† s·∫£n xu·∫•t";
        }

        return String.format("""
                B·∫°n l√† chuy√™n gia ƒë·ªãnh gi√° xe ƒëi·ªán c≈© t·∫°i Vi·ªát Nam.
                
                XE C·∫¶N ƒê·ªäNH GI√Å:
                - H√£ng: %s | Model: %s | Version: %s
                - NƒÉm: %s | Pin: %s | Km ƒë√£ ƒëi: %s
                
                QUY T·∫ÆC KH·∫§U HAO:
                1. Ra bi·ªÉn s·ªë: -10-15%%
                2. M·ªói nƒÉm: -8-12%%
                3. Km > 20k/nƒÉm: -3-5%%
                4. Pin < 90%%: -5-10%%
                ‚Üí T·ªïng: -20-35%% so v·ªõi gi√° m·ªõi
                
                Y√äU C·∫¶U: Tr·∫£ v·ªÅ JSON THU·∫¶N T√öY (kh√¥ng th√™m ```json):
                {
                  "title": "%s %s %s %s",
                  "newPrice": "Gi√° m·ªõi VNƒê",
                  "suggestedPrice": "X - Y VNƒê",
                  "description": "M√¥ t·∫£ ng·∫Øn g·ªçn 80-120 t·ª´",
                  "reason": "C√¥ng th·ª©c: Gi√° m·ªõi - kh·∫•u hao = gi√° c≈©",
                  "sources": [
                    "https://www.chotot.com/mua-ban-oto?q=%s+%s",
                    "https://bonbanh.com/oto-cu/%s-%s",
                    "https://oto.com.vn/mua-ban-xe"
                  ]
                }
                """,
                brandName, vehicleModel, versionName, manufactureYear, batteryHealth, mileageKm,
                brandName, vehicleModel, versionName, manufactureYear,
                brandName, vehicleModel,
                brandName.toLowerCase().replace(" ", "-"),
                vehicleModel.toLowerCase().replace(" ", "-"));
    }

    /**
     * Handle successful API response with proper finishReason check
     */
    private PriceSuggestion handleSuccessResponse(String responseBody, String vehicleModel) {
        try {
            log.debug("Raw response body: {}", responseBody);

            JsonNode root = objectMapper.readTree(responseBody);

            // Check for API errors
            if (root.has("error")) {
                JsonNode error = root.path("error");
                String errorMsg = error.path("message").asText();
                log.error("‚ùå Gemini API Error: {}", errorMsg);
                return generateFallback(vehicleModel);
            }

            // Get candidates array
            JsonNode candidates = root.path("candidates");
            if (!candidates.isArray() || candidates.isEmpty()) {
                log.error("‚ùå No candidates in response");
                return generateFallback(vehicleModel);
            }

            JsonNode firstCandidate = candidates.get(0);
            String finishReason = firstCandidate.path("finishReason").asText("UNKNOWN");

            log.info("üìä Finish Reason: {}", finishReason);

            // ‚úÖ CRITICAL: Only process if completed successfully
            if (!"STOP".equals(finishReason)) {
                log.error("‚ùå Response incomplete. Reason: {}", finishReason);

                switch (finishReason) {
                    case "MAX_TOKENS":
                        log.error("üí° Solution: Reduce GEMINI_MAX_TOKENS to 1500 or optimize prompt");
                        break;
                    case "SAFETY":
                        log.error("‚ö†Ô∏è Content blocked by safety filters");
                        break;
                    case "RECITATION":
                        log.error("‚ö†Ô∏è Content flagged for copyright");
                        break;
                }

                return generateFallback(vehicleModel);
            }

            // Extract text content
            JsonNode textNode = firstCandidate.at("/content/parts/0/text");
            if (textNode.isMissingNode() || textNode.asText().trim().isEmpty()) {
                log.error("‚ùå Empty text content");
                return generateFallback(vehicleModel);
            }

            String text = textNode.asText().trim();
            log.info("‚úÖ Received complete response ({} chars)", text.length());

            return parseJsonResponse(text, vehicleModel);

        } catch (JsonProcessingException e) {
            log.error("‚ùå JSON parsing error: {}", e.getMessage());
            return generateFallback(vehicleModel);
        } catch (Exception e) {
            log.error("‚ùå Unexpected error: {}", e.getMessage(), e);
            return generateFallback(vehicleModel);
        }
    }

    /**
     * Parse JSON response from Gemini
     */
    private PriceSuggestion parseJsonResponse(String rawText, String vehicleModel) {
        try {
            // Clean markdown wrapper if present
            String cleanedJson = rawText
                    .replaceAll("```json\\s*", "")
                    .replaceAll("```\\s*$", "")
                    .trim();

            // Remove any leading/trailing whitespace or newlines
            if (cleanedJson.startsWith("{") && cleanedJson.endsWith("}")) {
                log.debug("Valid JSON detected, parsing...");
            } else {
                log.warn("Response doesn't look like valid JSON, attempting to extract...");
                // Try to find JSON block within text
                int start = cleanedJson.indexOf("{");
                int end = cleanedJson.lastIndexOf("}");
                if (start >= 0 && end > start) {
                    cleanedJson = cleanedJson.substring(start, end + 1);
                }
            }

            log.debug("Cleaned JSON: {}", cleanedJson);

            JsonNode root = objectMapper.readTree(cleanedJson);

            // Extract fields with fallbacks
            String title = root.path("title").asText(vehicleModel + " - Xe ƒêi·ªán C≈©");
            String newPrice = root.path("newPrice").asText("Ch∆∞a x√°c ƒë·ªãnh");
            String suggestedPrice = root.path("suggestedPrice").asText("Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°");
            String description = root.path("description").asText("Xe ƒëi·ªán ch·∫•t l∆∞·ª£ng, gi√° h·ª£p l√Ω.");
            String reason = root.path("reason").asText("Gi√° ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n th·ªã tr∆∞·ªùng hi·ªán t·∫°i.");

            // Parse sources array
            List<String> sources = parseSources(root.path("sources"));

            // Fallback sources
            if (sources.isEmpty()) {
                sources = getDefaultSources();
            }

            log.info("‚úÖ Successfully parsed: {}", title);

            return new PriceSuggestion(suggestedPrice, reason, sources, description, title);

        } catch (JsonProcessingException e) {
            log.error("‚ùå Failed to parse JSON: {}", e.getMessage());
            log.error("Raw text was: {}", rawText);
            return generateFallback(vehicleModel);
        }
    }

    /**
     * Parse sources array from JSON node
     */
    private List<String> parseSources(JsonNode sourcesNode) {
        List<String> sources = new ArrayList<>();
        if (sourcesNode.isArray()) {
            for (JsonNode node : sourcesNode) {
                String url = node.asText();
                if (isValidCarSalesSource(url)) {
                    sources.add(url);
                }
            }
        }
        return sources;
    }

    /**
     * Validate car sales source URLs
     */
    private boolean isValidCarSalesSource(String url) {
        if (url == null || url.isEmpty()) return false;
        String lower = url.toLowerCase();
        List<String> validDomains = List.of(
                "chotot.com", "bonbanh.com", "oto.com.vn",
                "carmudi.vn", "choxe.vn"
        );
        return validDomains.stream().anyMatch(lower::contains);
    }

    /**
     * Get default reference sources
     */
    private List<String> getDefaultSources() {
        return List.of(
                "https://www.chotot.com/mua-ban-oto",
                "https://bonbanh.com/oto-cu",
                "https://oto.com.vn/mua-ban-xe"
        );
    }

    /**
     * Generate fallback response when API fails
     */
    private PriceSuggestion generateFallback(String vehicleModel) {
        String title = vehicleModel + " - Xe ƒêi·ªán C≈©";
        String reason = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API ho·∫∑c d·ªØ li·ªáu ch∆∞a ƒë·∫ßy ƒë·ªß. " +
                "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp.";
        String description = "Xe ƒëi·ªán " + vehicleModel + " ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãnh gi√°. " +
                "Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c b√°o gi√° ch√≠nh x√°c nh·∫•t.";

        log.warn("‚ö†Ô∏è Returning fallback response for: {}", vehicleModel);

        return new PriceSuggestion(
                "Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°",
                reason,
                getDefaultSources(),
                description,
                title
        );
    }

    // ========== Suggest Specs ==========

    /**
     * X√¢y d·ª±ng prompt ƒë·ªÉ g·ª£i √Ω th√¥ng s·ªë k·ªπ thu·∫≠t
     */
    public String buildSpecsPrompt(String productName, String vehicleModel, String brand, String version, Short year) {
        return String.format(
                """
                        B·∫°n l√† chuy√™n gia xe ƒëi·ªán.
                        H√£y d·ª±a v√†o t√™n s·∫£n ph·∫©m "%s", model "%s", th∆∞∆°ng hi·ªáu "%s", phi√™n b·∫£n "%s", v√† nƒÉm s·∫£n xu·∫•t "%d" ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng s·ªë k·ªπ thu·∫≠t chu·∫©n d∆∞·ªõi d·∫°ng JSON.
                        KH√îNG th√™m l·ªùi gi·∫£i th√≠ch, markdown, ho·∫∑c b·∫•t k·ª≥ k√Ω t·ª± n√†o ngo√†i JSON thu·∫ßn t√∫y.
                        
                        C·∫•u tr√∫c JSON c·∫ßn c√≥ CH√çNH X√ÅC c√°c tr∆∞·ªùng sau:
                        {
                          "model": "T√™n ƒë·∫ßy ƒë·ªß c·ªßa model",
                          "type": "Lo·∫°i xe (VD: SUV/Crossover, Scooter, Sedan, Hatchback, Xe m√°y ƒëi·ªán)",
                          "color": "M√†u s·∫Øc ph·ªï bi·∫øn",
                          "range_km": "T·∫ßm ho·∫°t ƒë·ªông th·ª±c t·∫ø (s·ªë km, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "battery_capacity_kwh": "Dung l∆∞·ª£ng pin (s·ªë kWh, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "charging_time_hours": "Th·ªùi gian s·∫°c ƒë·∫ßy pin (gi·ªù, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "motor_power_w": "C√¥ng su·∫•t ƒë·ªông c∆° (W, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "built_in_battery_capacity_ah": "Dung l∆∞·ª£ng pin t√≠ch h·ª£p theo xe (s·ªë Ah, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "built_in_battery_voltage_v": "ƒêi·ªán √°p danh ƒë·ªãnh c·ªßa pin (V, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "removable_battery": "Pin c√≥ th·ªÉ th√°o r·ªùi hay kh√¥ng (true/false)",
                          "power_hp": "C√¥ng su·∫•t t·ªëi ƒëa (s·ªë hp, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "top_speed_kmh": "T·ªëc ƒë·ªô t·ªëi ƒëa (s·ªë km/h, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "acceleration_0_100_s": "Th·ªùi gian tƒÉng t·ªëc 0-100km/h (s·ªë gi√¢y, kh√¥ng c√≥ ƒë∆°n v·ªã, ƒë·ªÉ null n·∫øu l√† xe m√°y)",
                          "weight_kg": "Tr·ªçng l∆∞·ª£ng b·∫£n th√¢n (s·ªë kg, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "gross_weight_kg": "Tr·ªçng l∆∞·ª£ng to√†n t·∫£i (s·ªë kg, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "length_mm": "Chi·ªÅu d√†i t·ªïng th·ªÉ (s·ªë mm, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "wheelbase_mm": "Chi·ªÅu d√†i c∆° s·ªü (s·ªë mm, kh√¥ng c√≥ ƒë∆°n v·ªã)",
                          "features": ["T√≠nh nƒÉng 1", "T√≠nh nƒÉng 2", "T√≠nh nƒÉng 3", "T√≠nh nƒÉng 4", "T√≠nh nƒÉng 5"]
                        }
                        
                        QUY T·∫ÆC B·∫ÆT BU·ªòC:
                        - T·∫§T C·∫¢ c√°c tr∆∞·ªùng s·ªë ph·∫£i l√† s·ªë nguy√™n ho·∫∑c s·ªë th·ª±c, KH√îNG c√≥ ƒë∆°n v·ªã, KH√îNG c√≥ d·∫•u ph·∫©y ph√¢n c√°ch h√†ng ngh√¨n
                        - Tr∆∞·ªùng "features" ph·∫£i l√† m·∫£ng string, m·ªói t√≠nh nƒÉng l√† 1 c√¢u ng·∫Øn g·ªçn, t·ª´ 5-10 t√≠nh nƒÉng
                        - N·∫øu kh√¥ng c√≥ th√¥ng tin ch√≠nh x√°c, h√£y ∆∞·ªõc l∆∞·ª£ng d·ª±a tr√™n xe c√πng ph√¢n kh√∫c v√† nƒÉm s·∫£n xu·∫•t
                        - N·∫øu l√† xe m√°y ƒëi·ªán: ƒë·ªÉ null cho "acceleration_0_100_s", ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ph√π h·ª£p
                        - CH·ªà tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ ```json, KH√îNG c√≥ gi·∫£i th√≠ch, KH√îNG c√≥ markdown
                        
                        V√≠ d·ª• output mong mu·ªën:
                        {
                          "model": "VF e34",
                          "type": "SUV/Crossover",
                          "color": "Xanh",
                          "range_km": 285,
                          "battery_capacity_kwh": 42,
                          "power_hp": 110,
                          "top_speed_kmh": 145,
                          "acceleration_0_100_s": 9.5,
                          "weight_kg": 1450,
                          "gross_weight_kg": 1890,
                          "length_mm": 4300,
                          "wheelbase_mm": 2611,
                          "features": ["H·ªá th·ªëng phanh ABS", "H·ªó tr·ª£ ƒë·ªó xe t·ª± ƒë·ªông", "M√†n h√¨nh c·∫£m ·ª©ng 10 inch", "K·∫øt n·ªëi smartphone", "Camera 360 ƒë·ªô", "C·∫£nh b√°o ƒëi·ªÉm m√π", "T√∫i kh√≠ an to√†n"]
                        }
                        """,
                productName, vehicleModel, brand, version, year);
    }

    /**
     * G·ªçi Gemini API ƒë·ªÉ g·ª£i √Ω th√¥ng s·ªë k·ªπ thu·∫≠t
     */
    public String suggestSpecs(String productName, String vehicleModel, String brand, String version, Short year) {
        String prompt = buildSpecsPrompt(productName, vehicleModel, brand, version, year);

        try {
            log.info("=== GEMINI REQUEST: Suggest Vehicle Specs ===");
            log.info("Product: {}, Model: {}, Brand: {}, Version: {}, Year: {}",
                    productName, vehicleModel, brand, version, year);

            String url = String.format(
                    "https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s",
                    this.modelName, apiKey); // Use this.modelName

            Map<String, Object> requestBody = Map.of(
                    "contents", List.of(
                            Map.of("parts", List.of(Map.of("text", prompt)))),
                    "generationConfig", Map.of(
                            "temperature", temperature,
                            "maxOutputTokens", maxTokens,
                            "topK", 40,
                            "topP", 0.9));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);

            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                JsonNode root = objectMapper.readTree(response.getBody());
                JsonNode textNode = root.at("/candidates/0/content/parts/0/text");

                if (!textNode.isMissingNode()) {
                    String result = textNode.asText().trim();
                    log.info("Raw Gemini specs response received");
                    return result;
                }
            }

            log.warn("No valid response from Gemini API for specs");
        } catch (JsonProcessingException e) {
            log.error("Error while generating specs: {}", e.getMessage(), e);
        } catch (Exception e) {
            log.error("Unexpected error calling Gemini API: {}", e.getMessage(), e);
        }

        return "{}";
    }

    /**
     * L·∫•y th√¥ng s·ªë k·ªπ thu·∫≠t xe v√† map th√†nh VehicleCatalogDTO
     */
    public VehicleCatalogDTO getVehicleSpecs(String productName, String vehicleModel, String brand, String version,
                                             Short year) {
        try {
            String json = suggestSpecs(productName, vehicleModel, brand, version, year);

            // L√†m s·∫°ch d·ªØ li·ªáu Gemini tr·∫£ v·ªÅ
            if (json.startsWith("```")) {
                json = json.replaceAll("```json", "")
                        .replaceAll("```", "")
                        .trim();
            }

            Model model = vehicleModelRepository.findByName(productName);
            VehicleCatalogDTO dto = objectMapper.readValue(json, VehicleCatalogDTO.class);
            dto.setModel(model);

            log.info("Cleaned JSON before parsing:\n{}", json);

            return dto;

        } catch (JsonProcessingException e) {
            log.error("Failed to parse specs JSON for '{}': {}", productName, e.getMessage());
            Model model = vehicleModelRepository.findByName(productName);
            return VehicleCatalogDTO.builder()
                    .model(model)
                    .type("Cannot define")
                    .features(List.of("Ch∆∞a c√≥ d·ªØ li·ªáu"))
                    .build();
        } catch (Exception e) {
            log.error("Unexpected error while generating specs: {}", e.getMessage(), e);
            Model model = vehicleModelRepository.findByName(productName);
            return VehicleCatalogDTO.builder()
                    .model(model)
                    .type("Cannot define")
                    .features(List.of("Ch∆∞a c√≥ d·ªØ li·ªáu"))
                    .build();
        }
    }
}