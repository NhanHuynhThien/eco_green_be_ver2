package com.evdealer.evdealermanagement.service.implement;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.evdealer.evdealermanagement.dto.transactions.ContractInfoDTO;
import com.evdealer.evdealermanagement.entity.account.Account;
import com.evdealer.evdealermanagement.entity.product.Product;
import com.evdealer.evdealermanagement.entity.transactions.ContractDocument;
import com.evdealer.evdealermanagement.entity.transactions.PurchaseRequest;
import com.evdealer.evdealermanagement.exceptions.AppException;
import com.evdealer.evdealermanagement.exceptions.ErrorCode;
import com.evdealer.evdealermanagement.repository.ContractDocumentRepository;
import com.evdealer.evdealermanagement.repository.ProductRepository;
import com.evdealer.evdealermanagement.repository.PurchaseRequestRepository;
import com.evdealer.evdealermanagement.utils.VietNamDatetime;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.time.LocalDateTime;
import java.util.*;

@Service
@Slf4j
@RequiredArgsConstructor
public class EversignService {

    private final RestTemplate restTemplate = new RestTemplate();
    private final ContractDocumentRepository contractDocumentRepository;
    private final PurchaseRequestRepository purchaseRequestRepository;
    private final ProductRepository productRepository;
    private final EmailService emailService;

    // CLoudinary config
    @Value("${CLOUDINARY_CLOUD_NAME}")
    private String cloudName;

    @Value("${CLOUDINARY_API_KEY}")
    private String cloudApiKey;

    @Value("${CLOUDINARY_API_SECRET}")
    private String cloudApiSecret;

    // Eversign Config
    @Value("${EVERSIGN_API_KEY}")
    private String apiKey;

    @Value("${EVERSIGN_BUSINESS_ID}")
    private String businessId;

    @Value("${EVERSIGN_TEMPLATE_ID}")
    private String templateId;

    @Value("${EVERSIGN_SANDBOX:true}") // ‚úÖ m·∫∑c ƒë·ªãnh sandbox
    private boolean sandboxMode;

    @Value("${APP_BASE_URL:http://localhost:8080}")
    private String appBaseUrl;

    private static final String EVERSIGN_API_BASE = "https://api.eversign.com/api";

    /**
     * T·∫°o h·ª£p ƒë·ªìng ƒë·ªÉ hai b√™n t·ª± ƒëi·ªÅn v√† k√Ω (sandbox mode)
     */
    public ContractInfoDTO createBlankContractForManualInput(
            Account buyer,
            Account seller,
            Product product
    ) {
        try {
            log.info("üöÄ [Eversign] T·∫°o h·ª£p ƒë·ªìng tr·ªëng (sandboxMode={})", sandboxMode);

            Map<String, Object> requestBody = buildContractRequest(buyer, seller, product);

            String url = String.format("%s/document?business_id=%s&access_key=%s",
                    EVERSIGN_API_BASE, businessId, apiKey);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.POST, entity, Map.class);

            log.info("üì¨ [Eversign] Response status: {}", response.getStatusCode());
            log.debug("üì• [Eversign] Full response: {}", response.getBody());

            if (response.getStatusCode() != HttpStatus.OK || response.getBody() == null) {
                throw new AppException(ErrorCode.CONTRACT_BUILD_FAILED);
            }

            Map<String, Object> body = response.getBody();
            String documentHash = (String) body.get("document_hash");
            if (documentHash == null) {
                throw new AppException(ErrorCode.CONTRACT_BUILD_FAILED);
            }

            // T·∫°o link k√Ω
            String buyerSignUrl = null;
            String sellerSignUrl = null;

            Object signersObj = body.get("signers");
            if (signersObj instanceof List<?> signersList) {
                for (Object obj : signersList) {
                    if (obj instanceof Map<?, ?> signer) {
                        String email = (String) signer.get("email");
                        String embeddedUrl = (String) signer.get("embedded_signing_url");
                        if (email != null && email.equalsIgnoreCase(buyer.getEmail())) {
                            buyerSignUrl = embeddedUrl;
                        } else if (email != null && email.equalsIgnoreCase(seller.getEmail())) {
                            sellerSignUrl = embeddedUrl;
                        }
                    }
                }
            }

            return ContractInfoDTO.builder()
                    .contractId(documentHash)
                    .contractUrl(buildContractViewUrl(documentHash))
                    .buyerSignUrl(buyerSignUrl)
                    .sellerSignUrl(sellerSignUrl)
                    .status("PENDING")
                    .build();

        } catch (Exception e) {
            log.error("üî• [Eversign] L·ªói khi t·∫°o h·ª£p ƒë·ªìng tr·ªëng: {}", e.getMessage(), e);
            throw new RuntimeException("L·ªói khi t·∫°o h·ª£p ƒë·ªìng v·ªõi Eversign: " + e.getMessage());
        }
    }

    private Map<String, Object> buildContractRequest(
            Account buyer,
            Account seller,
            Product product
    ) {
        Map<String, Object> body = new HashMap<>();
        body.put("sandbox", sandboxMode ? 1 : 0); // ‚úÖ b·∫≠t sandbox
        body.put("business_id", businessId);
        body.put("template_id", templateId);
        body.put("title", "H·ª£p ƒë·ªìng mua b√°n xe ƒëi·ªán (sandbox)");
        body.put("message", "Vui l√≤ng ƒëi·ªÅn th√¥ng tin v√† k√Ω h·ª£p ƒë·ªìng (sandbox).");
//        body.put("embedded_signing_enabled", 1);
        body.put("use_signer_order", 1);
        body.put("webhook_url", appBaseUrl + "/api/webhooks/eversign/document-complete");
        log.info("üì° Webhook URL g·ª≠i l√™n Eversign: {}", appBaseUrl + "/api/webhooks/eversign/document-complete");

        // üë• Ng∆∞·ªùi k√Ω
        List<Map<String, Object>> signers = new ArrayList<>();
        signers.add(Map.of(
                "role", "seller",
                "name", seller.getFullName(),
                "email", seller.getEmail(),
                "signing_order", 1
        ));
        signers.add(Map.of(
                "role", "buyer",
                "name", buyer.getFullName(),
                "email", buyer.getEmail(),
                "signing_order", 2
        ));
        body.put("signers", signers);

        log.debug("üß∞ [Eversign] Request body (sandbox={}): {}", sandboxMode, body);
        return body;
    }

    private String buildContractViewUrl(String documentHash) {
        return String.format("https://eversign.com/documents/%s", documentHash);
    }

    // ‚úÖ CH·ªà C·∫¶N DUY NH·∫§T PH∆Ø∆†NG TH·ª®C N√ÄY ƒê·ªÇ L√ÄM VI·ªÜC L∆ØU TR·ªÆ
    @Transactional
    public void createAndSaveContractDocument(PurchaseRequest request) {
        try {
            String documentHash = request.getContractId();
            if (documentHash == null) {
                log.error("‚ùå Kh√¥ng th·ªÉ l∆∞u ContractDocument v√¨ request ID {} thi·∫øu contractId.", request.getId());
                return;
            }

            if (contractDocumentRepository.findByDocumentId(documentHash).isPresent()) {
                log.warn("‚ö†Ô∏è ContractDocument cho hash {} ƒë√£ t·ªìn t·∫°i. B·ªè qua.", documentHash);
                return;
            }

            log.info("üìë B·∫Øt ƒë·∫ßu t·∫°o b·∫£n ghi ContractDocument cho documentHash: {}", documentHash);

            String finalDocUrl = String.format(
                    "https://api.eversign.com/download_final_document?access_key=%s&business_id=%s&document_hash=%s&audit_trail=1",
                    apiKey, businessId, documentHash
            );

            ContractDocument contract = new ContractDocument();
            contract.setPurchaseRequest(request);
            contract.setDocumentId(documentHash);
            contract.setTitle("H·ª£p ƒë·ªìng mua b√°n - " + request.getProduct().getTitle());
            contract.setPdfUrl(finalDocUrl);
            contract.setSignerEmail(request.getBuyer().getEmail());
            contract.setSignedAt(VietNamDatetime.nowVietNam()); // Ch√≠nh x√°c, ch∆∞a k√Ω n√™n ƒë·ªÉ null

            contractDocumentRepository.save(contract);
            log.info("‚úÖ [DB] ƒê√£ l∆∞u ContractDocument th√†nh c√¥ng v·ªõi URL: {}", finalDocUrl);

        } catch (Exception e) {
            log.error("‚ùå [Eversign] L·ªói nghi√™m tr·ªçng khi l∆∞u ContractDocument: {}", e.getMessage(), e);
            throw new RuntimeException("L·ªói khi t·∫°o v√† l∆∞u ContractDocument: " + e.getMessage());
        }
    }

    @Transactional
    public void processDocumentCompletion(String documentHash) {
        log.info("üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω webhook cho document hash: {}", documentHash);

        PurchaseRequest request = purchaseRequestRepository.findByContractId(documentHash)
                .orElse(null);

        if (request == null) {
            log.warn("‚ö†Ô∏è Webhook ƒë∆∞·ª£c nh·∫≠n nh∆∞ng kh√¥ng t√¨m th·∫•y request n√†o cho contract hash: {}", documentHash);
            return; // D·ª´ng x·ª≠ l√Ω n·∫øu kh√¥ng t√¨m th·∫•y request
        }

        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i ch∆∞a ph·∫£i l√† COMPLETED ƒë·ªÉ tr√°nh x·ª≠ l√Ω nhi·ªÅu l·∫ßn
        if (request.getContractStatus() == PurchaseRequest.ContractStatus.COMPLETED) {
            log.warn("‚ö†Ô∏è Webhook cho h·ª£p ƒë·ªìng ƒë√£ ho√†n th√†nh ƒë∆∞·ª£c nh·∫≠n l·∫°i, b·ªè qua. Hash: {}", documentHash);
            return;
        }

        // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i cho PurchaseRequest
        request.setContractStatus(PurchaseRequest.ContractStatus.COMPLETED);
        request.setStatus(PurchaseRequest.RequestStatus.CONTRACT_SIGNED);
        // C√≥ th·ªÉ c·∫≠p nh·∫≠t th·ªùi gian k√Ω ·ªü ƒë√¢y n·∫øu c·∫ßn
        if (request.getBuyerSignedAt() == null) request.setBuyerSignedAt(LocalDateTime.now());
        if (request.getSellerSignedAt() == null) request.setSellerSignedAt(LocalDateTime.now());

        purchaseRequestRepository.save(request);
        log.info("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng th√†nh COMPLETED cho request: {}", request.getId());

        Product product = request.getProduct();
        if (product != null) {
            product.setStatus(Product.Status.SOLD); // ƒê·ªïi tr·∫°ng th√°i th√†nh SOLD
            productRepository.save(product); // L∆∞u l·∫°i s·∫£n ph·∫©m
            log.info("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m ID {} th√†nh SOLD.", product.getId());
        } else {
            log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m li√™n quan ƒë·∫øn request ID {}.", request.getId());
        }

        // 2. G·ªçi ph∆∞∆°ng th·ª©c l∆∞u tr·ªØ file PDF (t√™n m·ªõi r√µ r√†ng h∆°n)
        // Ph∆∞∆°ng th·ª©c n√†y gi·ªù l√† m·ªôt ph·∫ßn c·ªßa c√πng m·ªôt transaction
        saveFinalContract(request);
    }

    // ƒê·ªïi t√™n ph∆∞∆°ng th·ª©c c≈© ƒë·ªÉ r√µ r√†ng h∆°n, logic b√™n trong gi·ªØ nguy√™n
    // Ph∆∞∆°ng th·ª©c n√†y gi·ªù s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi processDocumentCompletion
    private void saveFinalContract(PurchaseRequest request) {
        try {
            String documentHash = request.getContractId();
            log.info("üìë [Eversign] B·∫Øt ƒë·∫ßu t·∫£i v√† l∆∞u file h·ª£p ƒë·ªìng, documentHash={}", documentHash);

            // ... (to√†n b·ªô logic t·∫£i file, upload Cloudinary v√† l∆∞u ContractDocument c·ªßa b·∫°n)
            // ... (gi·ªØ nguy√™n nh∆∞ trong code c≈© c·ªßa b·∫°n)

            String downloadUrl = String.format(
                    "https://api.eversign.com/download_final_document?access_key=%s&business_id=%s&document_hash=%s&audit_trail=1",
                    apiKey, businessId, documentHash
            );
            byte[] pdfBytes = restTemplate.getForObject(downloadUrl, byte[].class);
            if (pdfBytes == null || pdfBytes.length == 0) {
                throw new IOException("T·∫£i file PDF t·ª´ Eversign th·∫•t b·∫°i (file r·ªóng).");
            }
            Cloudinary cloudinary = new Cloudinary(ObjectUtils.asMap("cloud_name", cloudName, "api_key", cloudApiKey, "api_secret", cloudApiSecret, "secure", true));
            String publicId = "contracts/" + documentHash;
            Map uploadResult = cloudinary.uploader().upload(pdfBytes, ObjectUtils.asMap("resource_type", "raw", "public_id", publicId, "format", "pdf"));
            String cloudinaryUrl = (String) uploadResult.get("secure_url");

            ContractDocument contract = contractDocumentRepository.findByDocumentId(documentHash).orElse(new ContractDocument());
            contract.setDocumentId(documentHash);
            contract.setTitle("H·ª£p ƒë·ªìng mua b√°n - " + request.getProduct().getTitle());
            contract.setPdfUrl(cloudinaryUrl);
            contract.setSignerEmail(request.getBuyer().getEmail());
            contract.setSignedAt(VietNamDatetime.nowVietNam());
            contractDocumentRepository.save(contract);

            log.info("‚úÖ [DB] L∆∞u th√¥ng tin h·ª£p ƒë·ªìng v√†o DB th√†nh c√¥ng!");

        } catch (Exception e) {
            log.error("‚ùå [Eversign] L·ªói nghi√™m tr·ªçng khi l∆∞u/upload h·ª£p ƒë·ªìng: {}", e.getMessage(), e);
            // N√©m l·∫°i exception ƒë·ªÉ transaction c√≥ th·ªÉ rollback
            throw new RuntimeException("L·ªói khi x·ª≠ l√Ω v√† l∆∞u file h·ª£p ƒë·ªìng t·ª´ Eversign: " + e.getMessage());
        }
    }
}
